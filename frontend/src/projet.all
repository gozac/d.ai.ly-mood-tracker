// src/services/api.tsx
import axios, { AxiosInstance } from 'axios';
import { DailyAnswers, Report } from '../types';

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

const api: AxiosInstance = axios.create({
  baseURL: API_URL,
  withCredentials: true,
});

export const submitReport = async (answers: DailyAnswers): Promise<Report> => {
  const { data } = await api.post<Report>('/submit-report', { answers });
  return data;
};

export const getTodayReport = async (): Promise<Report | null> => {
  const { data } = await api.get<Report>('/get-today-report');
  return data;
};// src/services/auth.tsx
import axios from 'axios';
import { User } from '../types';

interface AuthResponse {
  token: string;
  user: User;
}

interface LoginCredentials {
  username: string;
  password: string;
}

export const loginUser = async (credentials: LoginCredentials): Promise<User> => {
  const { data } = await axios.post<AuthResponse>('/login', credentials);
  localStorage.setItem('token', data.token);
  return data.user;
};import React, { useEffect, useState } from 'react';
import { Report as ReportType } from '../../types';
import { getTodayReport } from '../../services/api';
import Evaluation from './Evaluation';
//import './Report.scss';

const Report: React.FC = () => {
  const [report, setReport] = useState<ReportType | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReport = async () => {
      try {
        const data = await getTodayReport();
        setReport(data);
      } catch (err) {
        setError('Erreur lors du chargement du rapport');
      } finally {
        setLoading(false);
      }
    };

    fetchReport();
  }, []);

  if (loading) {
    return (
      <div className="report-loading">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Chargement...</span>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        {error}
      </div>
    );
  }

  return (
    <div className="report-container">
      {report ? (
        <>
          <div className="report-header">
            <h2>Rapport du {new Date(report.date).toLocaleDateString()}</h2>
          </div>
          
          <div className="report-content">
            <div className="report-answers">
              <h3>Vos réponses</h3>
              {Object.entries(report.answers).map(([question, answer]) => (
                <div key={question} className="answer-item">
                  <strong>{question}:</strong>
                  <p>{answer}</p>
                </div>
              ))}
            </div>

            <div className="report-summary">
              <h3>Résumé</h3>
              <p>{report.summary}</p>
            </div>

            {report.evaluation && <Evaluation evaluation={report.evaluation} />}
          </div>
        </>
      ) : (
        <div className="no-report">
          <h3>Aucun rapport pour aujourd'hui</h3>
          <p>Complétez le formulaire quotidien pour voir votre rapport.</p>
        </div>
      )}
    </div>
  );
};

export default Report;// src/components/report/Evaluation.tsx
import React from 'react';
//import 'styles/components/_evaluation.scss';

interface EvaluationProps {
  evaluation: string;
  date?: string;
}

const Evaluation: React.FC<EvaluationProps> = ({ evaluation, date }) => {
  return (
    <div className="evaluation-container">
      <div className="evaluation-header">
        <h3>Analyse IA</h3>
        {date && <span className="evaluation-date">{date}</span>}
      </div>
      
      <div className="evaluation-content">
        {/* On peut formater l'évaluation en sections si elle contient des marqueurs spécifiques */}
        {evaluation.split('\n').map((paragraph, index) => (
          <p key={index}>{paragraph}</p>
        ))}
      </div>
    </div>
  );
};

export default Evaluation;// src/components/form/DailyForm.tsx
import React, { useState } from 'react';
import { useForm } from 'react-hook-form';
import { DailyAnswers, Question } from '../../types';
import QuestionComponent from './Question';
import { submitReport } from '../../services/api';

const DailyForm: React.FC = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { register, handleSubmit, formState: { errors } } = useForm<DailyAnswers>();

  const questions: Question[] = [
    { id: 'q1', text: "Comment s'est passée votre journée ?" },
    { id: 'q2', text: "Qu'avez-vous accompli aujourd'hui ?" },
    { id: 'q3', text: "Comment vous sentez-vous ce soir ?" }
  ];

  const onSubmit = async (data: DailyAnswers) => {
    setIsSubmitting(true);
    try {
      await submitReport(data);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {questions.map(q => (
        <QuestionComponent
          key={q.id}
          question={q.text}
          id={q.id}
          register={register}
          error={errors[q.id]?.message}
        />
      ))}
      <button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Envoi...' : 'Envoyer'}
      </button>
    </form>
  );
};

export default DailyForm;// src/components/form/Question.tsx
import React from 'react';
import { UseFormRegister } from 'react-hook-form';
import { DailyAnswers } from '../../types';

interface QuestionProps {
  question: string;
  id: string;
  register: UseFormRegister<DailyAnswers>;
  error?: string;
}

const Question: React.FC<QuestionProps> = ({ question, id, register, error }) => {
  return (
    <div className="form-group">
      <label htmlFor={id}>{question}</label>
      <textarea
        id={id}
        className={`form-control ${error ? 'is-invalid' : ''}`}
        {...register(id, { required: true })}
      />
      {error && <div className="invalid-feedback">{error}</div>}
    </div>
  );
};

export default Question;// src/components/layout/ProtectedRoute.tsx
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
  const { isAuthenticated } = useAuth();

  if (!isAuthenticated) {
    return <Navigate to="/login" replace />;
  }

  return <>{children}</>;
};

export default ProtectedRoute;// src/components/layout/Navbar.tsx
import React from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

const Navbar: React.FC = () => {
  const { isAuthenticated, logout } = useAuth();

  return (
    <nav className="navbar">
      <Link to="/" className="navbar-brand">Daily Mood</Link>
      <div className="navbar-nav">
        {isAuthenticated ? (
          <>
            <Link to="/form" className="nav-link">Formulaire</Link>
            <Link to="/report" className="nav-link">Rapport</Link>
            <button onClick={logout} className="nav-link">Déconnexion</button>
          </>
        ) : (
          <>
            <Link to="/login" className="nav-link">Connexion</Link>
            <Link to="/register" className="nav-link">Inscription</Link>
          </>
        )}
      </div>
    </nav>
  );
};

export default Navbar;// src/components/auth/Register.tsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { registerUser } from '../../services/auth';

interface RegisterFormInputs {
  username: string;
  password: string;
  confirmPassword: string;
}

const Register: React.FC = () => {
  // Component implementation
};

export default Register;// src/components/auth/Login.tsx
import React from 'react';
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router-dom';
import { loginUser } from '../../services/auth';

interface LoginFormInputs {
  username: string;
  password: string;
}

const Login: React.FC = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormInputs>();
  const navigate = useNavigate();

  const onSubmit = async (data: LoginFormInputs) => {
    try {
      await loginUser(data);
      navigate('/form');
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {/* Form content */}
    </form>
  );
};

export default Login;// src/types/index.ts
export interface User {
  id: number;
  username: string;
}

export interface Question {
  id: string;
  text: string;
}

export interface DailyAnswers {
  [key: string]: string;
}

export interface Report {
  id: number;
  date: string;
  answers: DailyAnswers;
  summary: string;
  evaluation?: string;
}// src/components/report/Evaluation.scss
@import '../../styles/variables';

.evaluation-container {
  background-color: #ffffff;
  border-radius: 12px;
  padding: 2rem;
  margin-top: 2rem;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);

  .evaluation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #eef2f7;

    h3 {
      margin: 0;
      color: $primary-color;
      font-size: 1.5rem;
      font-weight: 600;
    }

    .evaluation-date {
      color: #6c757d;
      font-size: 0.9rem;
      padding: 0.25rem 0.75rem;
      background-color: #f8f9fa;
      border-radius: 20px;
    }
  }

  .evaluation-content {
    .evaluation-section {
      margin-bottom: 1.5rem;
      padding: 1rem;
      border-radius: 8px;

      h4 {
        font-size: 1.1rem;
        margin-bottom: 0.5rem;
        font-weight: 600;
      }

      &.evaluation-positive {
        background-color: #f0fff4;
        border-left: 4px solid #48bb78;
      }

      &.evaluation-suggestion {
        background-color: #fff5f5;
        border-left: 4px solid #f56565;
      }

      &.evaluation-neutral {
        background-color: #f8f9fa;
        border-left: 4px solid #4a5568;
      }

      p {
        margin: 0;
        line-height: 1.6;
        color: #2d3748;
      }
    }
  }

  .evaluation-footer {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid #eef2f7;
    text-align: center;

    small {
      color: #718096;
      font-style: italic;
    }
  }
}// main.scss
@import "bootstrap/scss/bootstrap";

.form-container {
  max-width: 600px;
  margin: 2rem auto;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

.report-card {
  background: #fff;
  padding: 1.5rem;
  margin: 1rem 0;
}// src/context/AuthContext.tsx

import React, { createContext, useContext, useState, useEffect } from 'react';
import { User } from '../types';
//import { api } from '../services/api.tsx';

// Interface pour définir la forme des données du contexte
interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  error: string | null;
}

// Interface pour le token décodé
interface DecodedToken {
  exp: number;
  user_id: number;
}

// Création du contexte
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Props du provider
interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Vérifier le token au chargement
  useEffect(() => {
    const initializeAuth = async () => {
      const token = localStorage.getItem('token');
      
      if (token) {
        try {
          // Vérifier si le token est valide
          const response = await api.get('/verify-token');
          setUser(response.data.user);
          // Configurer le token dans les headers axios
          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        } catch (err) {
          // Si le token est invalide, on déconnecte l'utilisateur
          localStorage.removeItem('token');
          setUser(null);
        }
      }
      
      setLoading(false);
    };

    initializeAuth();
  }, []);

  // Fonction de connexion
  const login = async (username: string, password: string) => {
    try {
      setError(null);
      const response = await api.post('/login', { username, password });
      const { token, user } = response.data;
      
      // Sauvegarder le token
      localStorage.setItem('token', token);
      
      // Configurer le token dans les headers axios
      api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      // Mettre à jour l'état
      setUser(user);
    } catch (err) {
      setError('Identifiants invalides');
      throw err;
    }
  };

  // Fonction de déconnexion
  const logout = () => {
    // Supprimer le token
    localStorage.removeItem('token');
    
    // Réinitialiser les headers axios
    delete api.defaults.headers.common['Authorization'];
    
    // Réinitialiser l'état
    setUser(null);
    setError(null);
  };

  // Vérifier si l'utilisateur est authentifié
  const isAuthenticated = !!user;

  // Valeur du contexte
  const value = {
    user,
    isAuthenticated,
    loading,
    login,
    logout,
    error
  };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
};

// Hook personnalisé pour utiliser le contexte
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};// src/App.tsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
//import { AuthProvider } from './context/AuthContext';
import Navbar from './components/layout/Navbar';
import Login from './components/auth/Login';
import Register from './components/auth/Register';
import DailyForm from './components/form/DailyForm';
import Report from './components/report/Report';
import ProtectedRoute from './components/layout/ProtectedRoute';
import './styles/main.scss';

const App: React.FC = () => {
  return (
    <div>
      <BrowserRouter>
        <Navbar />
        <div className="container">
          <Routes>
            <Route path="/login" element={<Login />} />
            <Route path="/register" element={<Register />} />
            <Route 
              path="/form" 
              element={
                <ProtectedRoute>
                  <DailyForm />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/report" 
              element={
                <ProtectedRoute>
                  <Report />
                </ProtectedRoute>
              } 
            />
          </Routes>
        </div>
      </BrowserRouter>
    </div>
  );
};

export default App;import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './app';
import { AuthProvider } from './context/AuthContext';
import './styles/main.scss';

const root = ReactDOM.createRoot(
  document.getElementById('root')
);

root.render(
  <React.StrictMode>
    <div>
      <App />
    </div>
  </React.StrictMode>
);